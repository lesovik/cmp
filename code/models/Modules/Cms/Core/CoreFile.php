<?php

/**
 * CoreFile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Content Management Platform
 * @subpackage CMP
 * @author     Dmitry "Les" Lesov <dmirty@mediaplatforms.ca>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CoreFile extends Crude
{
	const CROP_MAX_WIDTH='Crop Max Width';
	const MAX_WIDTH='Max Width';
	const ORIGINAL_MAX_WIDTH='Original Max Width';
	const MAX_HEIGHT='Max Height';
	const EXACT='Exact';
	const ORIGINAL_BOTH='Original Both';
	const NONE='None';
	const BOTH='Both';

    function getBaseFilterFormTag() {
         $form=html('form')
                ->action('')
                ->method('POST')
                ->enctype('multipart/form-data');
          return $form;
    }
	public function isImage()
	{
		return $this->getUploadFolder()=='images/originals';
	}

	public function getUploadFolder()
	{
		switch ($this->extension) {
			case 'mp3':
				return 'audios';
			case 'jpg':
			case 'jpeg':
			case 'gif':
			case 'bmp':
			case 'png':
				return 'images/originals';
			case 'flv':
			case 'mpg':
			case 'mov':
				return 'videos';
			case 'doc':
			case 'docx':
			case 'xls':
				return 'documents';
		}
		//for all other cases
		return 'misc';
	}
	public function getUrl()
	{
		return trim(UPLOAD_URL,'/') . '/' . $this->getUploadFolder() . '/' . $this->name . '.' . $this->extension;
	}
	private function getCrop($params)
	{
		$query=Doctrine_Query::create()->from('CoreCrops');
		foreach ($params as $param_key=>$param_value) {
			$query->addWhere($param_key.'=?',$param_value);
		}
		return $query->fetchOne();
	}
	private function insertCrop($data)
	{
		$crops_table=Doctrine::getTable('CoreCrops');
		$crops_row=$crops_table->create($data)->save();
	}
	public function crop($width,$height,$type,$sizes=null)
    {
    	if (!$sizes) {
    		$sizes_text='';
			$crop=$this->getCrop(array('width'=>$width,'height'=>$height,'type'=>$type,'file_id'=>$this->id));
    	}else{
    		$sizes_text=implode('_',$sizes);
			$crop=$this->getCrop(array(
				'file_id'=>$this->id,
				'width'=>$width,
				'height'=>$height,
				'type'=>$type,
				'crop_x'=>$sizes['x'],
				'crop_y'=>$sizes['y'],
				'crop_width'=>$sizes['width'],
				'crop_height'=>$sizes['height']
    		));
    	}
    	$filename=sprintf('%s/%s/%d_%s_%d_%d_%s_%s.%s',trim(UPLOAD_URL,'/'),'images/crops',$this->id,$this->name,$width,$height,strtolower(str_replace(' ','_',$type)),$sizes_text,$this->extension);

		if (!$crop) {
    		$path=$this->getUrl();
    		if ($width<600) {
    			$path=$this->crop(600,600,'Both');//Crop to 600px before re-cropping to other sizes for speed!
    		}

    		if (!$sizes) {
    			$image_size=getimagesize(RELATIVE_BASE_URL . $path);

    			$this->insertCrop(array('width'=>$width,'height'=>$height,'type'=>$type,'file_id'=>$this->id));
    			$this->resize_image($path,$this->extension,array('x1'=>0,'y1'=>0,'width'=>$image_size[0],'height'=>$image_size[1]),$filename,$width,$height,$type);
    		}else{
    			$this->insertCrop(array('width'=>$width,'height'=>$height,'type'=>$type,'file_id'=>$this->id,'crop_x'=>$sizes['x'],'crop_y'=>$sizes['y'],'crop_width'=>$sizes['width'],'crop_height'=>$sizes['height']));
				$this->resize_image($path,$this->extension,array('x1'=>$sizes['x'],'y1'=>$sizes['y'],'width'=>$sizes['width'],'height'=>$sizes['height']),$filename,$width,$height,$type);

    		}
    	}

    	return $filename;
    }

	public function tryDelete()
	{
		try {
			parent::delete(true);
			@unlink(RELATIVE_BASE_URL . ltrim($this->getUrl(),'/'));
		}catch(Exception $ex) {
			//can't delete the file
		}
	}
	public function getFieldValue($relation,$form_class)
	{
		
		$file_location = $this->getUrl();

		$file_controls='';

		if ($this->isImage()) {
			$file_controls=html('img')->src('/' . $this->crop(20,20,CoreFile::MAX_WIDTH));
		}
		return
			$file_controls .
			html('span')->class('right_controls')->append(
				html('a')->target('_blank')->href($file_location)->append('View') . ' | ' .
				html('a')->target('_blank')->href('#')->data('remove-file',$relation)->data('remove-path','/admin?obj='.get_class($form_class).'&action=read&id='.$form_class->id)->class('remove_file')->append('Delete')
			)
		;

	}

    public function resize_image($path,$extension,$params,$new_path,$new_required_width,$new_required_height,$type)
	{
		$extension=strtolower($extension);

		//Get image path and size
		$path=RELATIVE_BASE_URL . ltrim($path,'/');
		$new_path=RELATIVE_BASE_URL . ltrim($new_path,'/');
		$image_size=getimagesize($path);

		//Fill in the default values
		$width=$image_size[0];
		$height=$image_size[1];
		$original_ratio=$width/$height;
		if ($params['height']>0) {
			$cropped_ratio=$params['width']/$params['height'];
		}

		if ($width<=0 || $height<=0) {
			//throw new Exception('Incorrect image dimensions');
	        return;
		}

		//Figure out the new dimensions
		switch ($type) {
			case 'Crop Max Width':

				$crop_width=$params['width'];
				$crop_height=$params['height'];
				$original_ratio=$crop_width/$crop_height;

				$new_width=$new_required_width;
				$new_height = $new_width/$original_ratio;

				break;
			case 'Max Width':
				$new_width=$new_required_width;
				$new_height = $new_width/$original_ratio;

				break;
			case 'Original Max Width':
				//don't crop below the required width
				if ($new_required_width<$params['width'] || !$params['width']) {
					//if no cropping occured yet
					if ($params['width']) {
						$new_width=$new_required_width;
						$new_height = $new_width/$cropped_ratio;
					}else{
						$new_width=$new_required_width;
						$new_height = $new_width/$original_ratio;
					}

				}else{
					$new_width=$params['width'];
					$new_height=$params['height'];
				}
				break;
			case 'Max Height':
				$new_height=$new_required_height;
				$new_width = $new_height*$original_ratio;
				break;
			case 'Exact':
				$new_width=$params['width'];
				$new_height=$params['height'];
				if (!$new_width || !$new_height) {
					$new_width=$new_required_width;
					$new_height = $new_width/$original_ratio;
				}
				break;
			case 'Original Both';
				if (!($new_required_width<$params['width'] || !$params['width'])) {
					$new_width=$params['width'];
					$new_height=$params['height'];
					break;
				}
			case 'Both':
				$new_width=$new_required_width;
				$new_height=$new_required_height;

				if ($new_width/$new_height > $original_ratio) {
				   $twidth = $new_height*$original_ratio;
				   $theight=$new_height;
				} else {
				   $theight = $new_width/$original_ratio;
				   $twidth=$new_width;
				}

				$new_width=$twidth;
				$new_height=$theight;

				break;
			case 'None':
				$new_width=$new_required_width;
				$new_height=$new_required_height;
				break;
			default:
				$new_width=$params['width'];
				$new_height=$params['height'];

				break;
		}


		//Format the new width and height
		$new_width=(int)$new_width;
		$new_height=(int)$new_height;
		//print_r(array($new_width,$new_height));

		/**
		 * PERFORM THE ACTUAL CROP
		 */
			$image_p = imagecreatetruecolor($new_width, $new_height);
			if ($params['width'] && $params['height']) {
				$image_temp = imagecreatetruecolor($params['width'], $params['height']);
			}



			switch ($extension) {
				case 'jpg':
				case 'jpeg':
					$image = imagecreatefromjpeg($path);
					break;
				case 'gif':
					$image = @imagecreatefromgif($path);

	                if (!$image) {
	                    $image=imagecreatefromjpeg($path);
	                }

					break;
				case 'png':
					$image = @imagecreatefrompng($path);
	                if (!$image) {
	                    $image=imagecreatefromjpeg($path);
	                }
					break;
			}

			//imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
			//If no params are passed, scale the original image (not the crop)
			if ($params['width'] && $params['height']) {
				imagecopyresampled($image_temp, $image, 0, 0, $params['x1'], $params['y1'], $params['width'], $params['height'],$params['width'], $params['height']);
				imagecopyresampled($image_p, $image_temp, 0, 0, 0, 0, $new_width, $new_height,$params['width'], $params['height']);
			}else{
				imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height,$width, $height);
			}


			// Output
			imagejpeg($image_p, $new_path, 90);

			imagedestroy($image);
			imagedestroy($image_p);
			if ($params['width'] && $params['height']) {
				imagedestroy($image_temp);
			}
		/**
		 * END ACTUAL CROP
		 */
		return true;
	}
}